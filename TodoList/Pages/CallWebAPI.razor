@page "/call-web-api"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@using System.Text.RegularExpressions;

<h1>Call web API from a Blazor Server Razor component</h1>

@if (getBranchesError || branches is null)
{
    <p>Unable to get branches from GitHub. Please try again later.</p>
}
else
{
    <ul>
        @foreach (var branch in branches)
        {
            <li>@branch.Name - @branch.Url</li>
        }
    </ul>
}

<p role="status">Current string count: @selectString</p>

<button class="btn btn-primary" @onclick="ChangeTargetRepo">Change repository target</button>

@code {
    private IEnumerable<GitHubBranch>? branches = Array.Empty<GitHubBranch>();
    private bool getBranchesError;
    private bool shouldRender;
    private const int NUMSTRINGS = 3;
    private const int MAXBRANCHES = 6;
    private string[] arrayOfReferences = new string[NUMSTRINGS];
    private string blazorTodoBranches = "https://api.github.com/repos/pauleaster/BlazorTodo/branches";
    private string aspNetCoreBranches = "https://api.github.com/repos/dotnet/AspNetCore.Docs/branches";
    private string rnsBranches = "https://api.github.com/repos/pauleaster/rns.rs/branches";
    private string pattern = @"(.*)(/commits/)(.*)";

    private static int selectString = 0;


    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        await UpdateBranchesAsync();
    }

    protected async Task UpdateBranchesAsync()
    {
        arrayOfReferences[0] = blazorTodoBranches;
        arrayOfReferences[1] = aspNetCoreBranches;
        arrayOfReferences[2] = rnsBranches;
        var request = new HttpRequestMessage(HttpMethod.Get, arrayOfReferences[selectString]);
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                };

            var contentStream = await response.Content.ReadAsStreamAsync();
            using var jsonDocument = await JsonDocument.ParseAsync(contentStream);
            var rootElement = jsonDocument.RootElement;
            var branchList = new List<GitHubBranch>();

            foreach (var branchElement in rootElement.EnumerateArray().Take(MAXBRANCHES))
            {
                var longurl = branchElement.GetProperty("commit").GetProperty("url").GetString();

                var branch = new GitHubBranch
                    {
                        Name = branchElement.GetProperty("name").GetString(),
                        Url =  Regex.Replace(longurl, pattern, "$1") ,
                };
                branchList.Add(branch);
            }

            branches = branchList;
        }
        else
        {
            getBranchesError = true;
        }

        shouldRender = true;
    }



    public class GitHubBranch
    {
        public string? Name { get; set; }
        public string? Url { get; set; }
    }

    private async void ChangeTargetRepo()
    {
        selectString = (selectString + 1) % NUMSTRINGS;
        await UpdateBranchesAsync();
        StateHasChanged();
    }
}
